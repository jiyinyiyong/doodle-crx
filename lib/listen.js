// Generated by CoffeeScript 1.6.3
var born, config, configKeys, connect, failedTimes, global, lastTime, openSocket, reload, time;

born = function(baby, keys, model) {
  keys.map(function(key) {
    if (model[key]) {
      return baby[key] = model[key];
    }
  });
  return baby;
};

configKeys = 'hostname port target'.split(' ');

global = {
  hostname: "localhost",
  port: 7776,
  ws: void 0,
  status: true,
  target: 'localhost'
};

try {
  config = JSON.parse(localStorage.getItem("config"));
} catch (_error) {}

if (config == null) {
  config = {};
}

global = born(global, configKeys, config);

failedTimes = 0;

time = function() {
  return (new Date).getTime();
};

lastTime = time();

reload = function() {
  var newTime;
  newTime = time();
  if ((newTime - lastTime) > 1000) {
    lastTime = newTime;
    if (global.status === true) {
      console.log('target', global.target);
      return chrome.tabs.query({}, function(tabs) {
        return tabs.map(function(tab) {
          var ss;
          ss = global.target;
          if ((ss != null) && (tab.url.indexOf(ss) > 0)) {
            console.info('reloading', tab.url);
            return chrome.tabs.reload(tab.id);
          }
        });
      });
    } else {
      return console.info('status is off, will not reload');
    }
  } else {
    return console.warn('too frequent, not reload');
  }
};

openSocket = function() {
  var h, p;
  h = global.hostname;
  p = global.port;
  global.ws = new WebSocket("ws://" + h + ":" + p);
  global.ws.onmessage = function(message) {
    if (global.status) {
      return reload();
    } else {
      return console.info('disabled in status');
    }
  };
  global.ws.onclose = function() {
    delete global.ws.onclose;
    delete global.ws;
    console.log('connection closed, calling connect', failedTimes);
    if (failedTimes < 10) {
      return connect();
    } else {
      console.warn('failedTimes > 10');
      chrome.browserAction.setIcon({
        path: "img/d-off.png"
      });
      return global.status = false;
    }
  };
  return global.ws.onopen = function() {
    console.info('connected');
    return failedTimes = 0;
  };
};

connect = function() {
  if (global.status === true) {
    if (!global.ws) {
      console.log("connecting...");
      failedTimes += 1;
      return setTimeout(openSocket, 1000);
    }
  }
};

chrome.browserAction.onClicked.addListener(function(tab) {
  var _ref;
  if (global.status === true) {
    console.info('status disabled');
    if ((_ref = global.ws) != null) {
      _ref.close();
    }
    chrome.browserAction.setIcon({
      path: "img/d-off.png"
    });
    return global.status = false;
  } else {
    chrome.browserAction.setIcon({
      path: "img/d-on.png"
    });
    global.status = true;
    console.info('status enabled, will call connect');
    return connect();
  }
});

chrome.extension.onRequest.addListener(function(req, sender, res) {
  var _ref;
  if ((_ref = global.ws) != null) {
    _ref.close();
  }
  return global = born(global, configKeys, req.update);
});

chrome.browserAction.setIcon({
  path: "img/d-on.png"
});

console.clear();

console.log('starting data:', global);

connect();

/*
//@ sourceMappingURL=listen.map
*/
